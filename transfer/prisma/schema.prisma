// ============================================================================
// @id              clé primaire
// @autoincrement   incrémente automatiquement l'ID
// @default         valeur par défaut
// @unique          valeur unique dans la table
// @relation        relation entre deux modèles
// @updatedAt       met automatiquement la date quand la ligne est modifiée
// ============================================================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Représente un utilisateur de l'application
model User {
  id                 Int       @id @default(autoincrement())
  firstName          String
  lastName           String
  emailPrivate       String    @unique
  emailProfessional  String    @unique
  password           String
  isAdmin            Boolean   @default(false)
  mustChangePassword Boolean   @default(false)
  managerId          Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  locationId         Int?
  location           Location? @relation(fields: [locationId], references: [id])

  ownedGroups      Group[]     @relation("OwnedGroups")
  groupMemberships GroupUser[]

  ticketsCreated  Ticket[] @relation("TicketCreatedBy")
  ticketsApproved Ticket[] @relation("TicketApprovedBy")
  ticketsAssigned Ticket[] @relation("TicketAssignedTo")
  ticketsUpdated  Ticket[] @relation("TicketUpdatedBy")
  ticketsClosed   Ticket[] @relation("TicketClosedBy")

  comments  Comment[]
  computers Computer[]
}

// Représente un groupe de support
model Group {
  id          Int         @id @default(autoincrement())
  groupName   String
  description String?
  locationId  Int?
  location    Location?   @relation(fields: [locationId], references: [id])
  ownerId     Int
  owner       User        @relation("OwnedGroups", fields: [ownerId], references: [id], onDelete: Cascade)
  members     GroupUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignedTickets Ticket[]
}

// Table de liaison entre les utilisateurs et les groupes
model GroupUser {
  id      Int     @id @default(autoincrement())
  userId  Int
  groupId Int
  isAdmin Boolean @default(false)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId]) // contrainte sur la table entière
}

// Represente une localisation
model Location {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  groups  Group[]
  users   User[]
  tickets Ticket[]
}

// Définit un type de ticket
enum TicketType {
  incident
  task
}

// Represente un statut de ticket
model Status {
  id    Int    @id @default(autoincrement())
  label String @unique

  tickets Ticket[]
}

// Représente la priorité d'un ticket
model Priority {
  id    Int    @id @default(autoincrement())
  label String @unique

  tickets Ticket[]
  slas    SLA[]
}

// Représente la categorie d'un ticket
model Category {
  id    Int    @id @default(autoincrement())
  label String @unique
  type  String @default("incident")

  tickets Ticket[]
}

// Définit un SLA
model SLA {
  id             Int @id @default(autoincrement())
  priorityId     Int
  responseTime   Int
  resolutionTime Int

  priority Priority @relation(fields: [priorityId], references: [id])
  tickets  Ticket[]
}

// Représente un ticket
model Ticket {
  id          Int        @id @default(autoincrement())
  number      String     @unique
  title       String
  description String
  type        TicketType

  statusId   Int
  priorityId Int
  categoryId Int
  slaId      Int?

  isApproved Boolean
  approverId Int?

  createdById       Int?
  assignedToId      Int?
  assignmentGroupId Int?
  locationId        Int

  creationDate DateTime  @default(now())
  updateDate   DateTime?
  closedDate   DateTime?

  updatedById Int?
  closedById  Int?

  isBreached     Boolean?
  responseDate   DateTime?
  additionalInfo String?

  status   Status   @relation(fields: [statusId], references: [id])
  priority Priority @relation(fields: [priorityId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  sla      SLA?     @relation(fields: [slaId], references: [id])
  location Location @relation(fields: [locationId], references: [id])

  createdBy       User?  @relation("TicketCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  approver        User?  @relation("TicketApprovedBy", fields: [approverId], references: [id], onDelete: SetNull)
  assignedTo      User?  @relation("TicketAssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)
  updatedBy       User?  @relation("TicketUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  closedBy        User?  @relation("TicketClosedBy", fields: [closedById], references: [id], onDelete: SetNull)
  assignmentGroup Group? @relation(fields: [assignmentGroupId], references: [id])

  comments Comment[]
}

// Représente un commentaire dans un ticket
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  ticketId    Int
  createdById Int?

  ticket    Ticket @relation(fields: [ticketId], references: [id])
  createdBy User?  @relation(fields: [createdById], references: [id], onDelete: SetNull)
}

// Représente un ordinateur
model Computer {
  id           Int    @id @default(autoincrement())
  computerName String
  serialNumber String @unique
  assignedToId Int?
  assignedTo   User?  @relation(fields: [assignedToId], references: [id], onDelete: SetNull)

  assignedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
